classdef ExperimentView < symphonyui.ui.View

    events
        BeginEpochGroup
        EndEpochGroup
        AddSource
        SelectedNode
        AddProperty
        RemoveProperty
        AddKeyword
        RemoveKeyword
        AddNote
        RemoveNote
    end

    properties (Access = private)
        beginEpochGroupTool
        endEpochGroupTool
        addSourceTool
        experimentTree
        cardPanel
        emptyCard
        experimentCard
        epochGroupCard
        epochCard
        sourceCard
        tabGroup
        propertiesTable
        keywordsTable
        notesTable
        idToNode
    end

    properties (Constant)
        SOURCES_NODE_ID         = 'SOURCES_NODE_ID'
        EPOCH_GROUPS_NODE_ID    = 'EPOCH_GROUPS_NODE_ID'

        EMPTY_CARD          = 1
        EXPERIMENT_CARD     = 2
        SOURCE_CARD         = 3
        EPOCH_GROUP_CARD    = 4
        EPOCH_CARD          = 5
    end

    methods

        function createUi(obj)
            import symphonyui.ui.util.*;

            obj.idToNode = containers.Map();

            set(obj.figureHandle, 'Name', 'Experiment');
            set(obj.figureHandle, 'Position', screenCenter(500, 410));

            % Toolbar.
            toolbar = uitoolbar( ...
                'Parent', obj.figureHandle);
            obj.beginEpochGroupTool = uipushtool( ...
                'Parent', toolbar, ...
                'TooltipString', 'Begin Epoch Group...', ...
                'ClickedCallback', @(h,d)notify(obj, 'BeginEpochGroup'));
            setIconImage(obj.beginEpochGroupTool, symphonyui.app.App.getResource('icons/group_begin.png'));
            obj.endEpochGroupTool = uipushtool( ...
                'Parent', toolbar, ...
                'TooltipString', 'End Epoch Group', ...
                'ClickedCallback', @(h,d)notify(obj, 'EndEpochGroup'));
            setIconImage(obj.endEpochGroupTool, symphonyui.app.App.getResource('icons/group_end.png'));
            obj.addSourceTool = uipushtool( ...
                'Parent', toolbar, ...
                'TooltipString', 'Add Source...', ...
                'Separator', 'on', ...
                'ClickedCallback', @(h,d)notify(obj, 'AddSource'));
            setIconImage(obj.addSourceTool, symphonyui.app.App.getResource('icons/source_add.png'));

            mainLayout = uix.HBoxFlex( ...
                'Parent', obj.figureHandle, ...
                'Padding', 11, ...
                'Spacing', 7);

            masterLayout = uix.VBoxFlex( ...
                'Parent', mainLayout, ...
                'Spacing', 7);

            obj.experimentTree = uiextras.jTree.Tree( ...
                'Parent', masterLayout, ...
                'FontName', get(obj.figureHandle, 'DefaultUicontrolFontName'), ...
                'FontSize', get(obj.figureHandle, 'DefaultUicontrolFontSize'), ...
                'SelectionChangeFcn', @(h,d)notify(obj, 'SelectedNode'));
            root = obj.experimentTree.Root;
            root.setIcon(symphonyui.app.App.getResource('icons/experiment.png'));

            sources = uiextras.jTree.TreeNode( ...
                'Parent', root, ...
                'Name', 'Sources', ...
                'Value', obj.SOURCES_NODE_ID);
            sources.setIcon(symphonyui.app.App.getResource('icons/folder.png'));
            obj.idToNode(obj.SOURCES_NODE_ID) = sources;

            groups = uiextras.jTree.TreeNode( ...
                'Parent', root, ...
                'Name', 'Epoch Groups', ...
                'Value', obj.EPOCH_GROUPS_NODE_ID);
            groups.setIcon(symphonyui.app.App.getResource('icons/folder.png'));
            obj.idToNode(obj.EPOCH_GROUPS_NODE_ID) = groups;

            detailLayout = uix.VBox( ...
                'Parent', mainLayout);

            obj.cardPanel = uix.CardPanel( ...
                'Parent', detailLayout);

            % Empty card.
            emptyLayout = uix.VBox('Parent', obj.cardPanel); %#ok<NASGU>

            % Experiment card.
            experimentLayout = uix.VBox( ...
                'Parent', obj.cardPanel, ...
                'Spacing', 7);
            experimentGridLayout = uix.Grid( ...
                'Parent', experimentLayout, ...
                'Spacing', 7);
            Label( ...
                'Parent', experimentGridLayout, ...
                'String', 'Name:');
            Label( ...
                'Parent', experimentGridLayout, ...
                'String', 'Location:');
            Label( ...
                'Parent', experimentGridLayout, ...
                'String', 'Start time:');
            Label( ...
                'Parent', experimentGridLayout, ...
                'String', 'Purpose:');
            obj.experimentCard.nameField = uicontrol( ...
                'Parent', experimentGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            obj.experimentCard.locationField = uicontrol( ...
                'Parent', experimentGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            obj.experimentCard.startTimeField = uicontrol( ...
                'Parent', experimentGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            obj.experimentCard.purposeField = uicontrol( ...
                'Parent', experimentGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            set(experimentGridLayout, ...
                'Widths', [60 -1], ...
                'Heights', [25 25 25 25]);
            obj.experimentCard.tabGroupParent = uix.Panel( ...
                'Parent', experimentLayout, ...
                'BorderType', 'none');
            set(experimentLayout, 'Heights', [25*4+7*3 -1]);

            % Source card.
            sourceLayout = uix.VBox( ...
                'Parent', obj.cardPanel, ...
                'Spacing', 7);
            sourceGridLayout = uix.Grid( ...
                'Parent', sourceLayout, ...
                'Spacing', 7);
            Label( ...
                'Parent', sourceGridLayout, ...
                'String', 'Label:');
            obj.sourceCard.labelField = uicontrol( ...
                'Parent', sourceGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            set(sourceGridLayout, ...
                'Widths', [60 -1], ...
                'Heights', [25]);
            obj.sourceCard.tabGroupParent = uix.Panel( ...
                'Parent', sourceLayout, ...
                'BorderType', 'none');
            set(sourceLayout, 'Heights', [25*1+7*0 -1]);

            % Epoch group card.
            epochGroupLayout = uix.VBox( ...
                'Parent', obj.cardPanel, ...
                'Spacing', 7);
            epochGroupGridLayout = uix.Grid( ...
                'Parent', epochGroupLayout, ...
                'Spacing', 7);
            Label( ...
                'Parent', epochGroupGridLayout, ...
                'String', 'Label:');
            Label( ...
                'Parent', epochGroupGridLayout, ...
                'String', 'Start time:');
            Label( ...
                'Parent', epochGroupGridLayout, ...
                'String', 'End time:');
            Label( ...
                'Parent', epochGroupGridLayout, ...
                'String', 'Source:');
            obj.epochGroupCard.labelField = uicontrol( ...
                'Parent', epochGroupGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            obj.epochGroupCard.startTimeField = uicontrol( ...
                'Parent', epochGroupGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            obj.epochGroupCard.endTimeField = uicontrol( ...
                'Parent', epochGroupGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            obj.epochGroupCard.sourceField = uicontrol( ...
                'Parent', epochGroupGridLayout, ...
                'Style', 'edit', ...
                'Enable', 'off', ...
                'HorizontalAlignment', 'left');
            set(epochGroupGridLayout, ...
                'Widths', [60 -1], ...
                'Heights', [25 25 25 25]);
            obj.epochGroupCard.tabGroupParent = uix.Panel( ...
                'Parent', epochGroupLayout, ...
                'BorderType', 'none');
            set(epochGroupLayout, 'Heights', [25*4+7*3 -1]);

            % Epoch card.
            epochLayout = uix.VBox( ...
                'Parent', obj.cardPanel, ...
                'Spacing', 7);
            obj.epochCard.tabGroupParent = uix.Panel('Parent', epochLayout, 'BorderType', 'none');
            set(epochLayout, 'Heights', [-1]);

            % Tab panel.
            obj.tabGroup = uitabgroup( ...
                'Parent', obj.experimentCard.tabGroupParent);

            % Properties tab.
            propertiesTab = uitab( ...
                'Parent', obj.tabGroup, ...
                'Title', 'Properties');
            propertiesLayout = uix.VBox( ...
                'Parent', propertiesTab);
            obj.propertiesTable = Table( ...
                'Parent', propertiesLayout, ...
                'ColumnName', {'Key', 'Value'}, ...
                'Enable', 'off');
            obj.createAddRemoveButtons(propertiesLayout, @(h,d)notify(obj, 'AddProperty'), @(h,d)notify(obj, 'RemoveProperty'));
            set(propertiesLayout, 'Heights', [-1 25]);

            % Keywords tab.
            keywordsTab = uitab( ...
                'Parent', obj.tabGroup, ...
                'Title', 'Keywords');
            keywordsLayout = uix.VBox( ...
                'Parent', keywordsTab);
            obj.keywordsTable = Table( ...
                'Parent', keywordsLayout, ...
                'ColumnName', {'Keywords'}, ...
                'Enable', 'off');
            obj.createAddRemoveButtons(keywordsLayout, @(h,d)notify(obj, 'AddKeyword'), @(h,d)notify(obj, 'RemoveKeyword'));
            set(keywordsLayout, 'Heights', [-1 25]);

            % Notes tab.
            notesTab = uitab( ...
                'Parent', obj.tabGroup, ...
                'Title', 'Notes');
            notesLayout = uix.VBox( ...
                'Parent', notesTab);
            obj.notesTable = Table( ...
                'Parent', notesLayout, ...
                'ColumnName', {'Time', 'Text'}, ...
                'ColumnWidth', {80}, ...
                'Enable', 'off');
            [~, removeButton] = obj.createAddRemoveButtons(notesLayout, @(h,d)notify(obj, 'AddNote'), @(h,d)notify(obj, 'RemoveNote'));
            set(removeButton, 'Enable', 'off');
            set(notesLayout, 'Heights', [-1 25]);

            set(obj.cardPanel, 'Selection', 1);

            set(mainLayout, 'Widths', [-1 -2]);
        end

        function enableBeginEpochGroup(obj, tf)
            set(obj.beginEpochGroupTool, 'Enable', symphonyui.ui.util.onOff(tf));
        end

        function enableEndEpochGroup(obj, tf)
            set(obj.endEpochGroupTool, 'Enable', symphonyui.ui.util.onOff(tf));
        end

        function setSelectedCard(obj, index)
            set(obj.cardPanel, 'Selection', index);

            switch index
                case obj.EMPTY_CARD
                    return;
                case obj.EXPERIMENT_CARD
                    parent = obj.experimentCard.tabGroupParent;
                case obj.SOURCE_CARD
                    parent = obj.sourceCard.tabGroupParent;
                case obj.EPOCH_GROUP_CARD
                    parent = obj.epochGroupCard.tabGroupParent;
                case obj.EPOCH_CARD
                    parent = obj.epochCard.tabGroupParent;
            end
            set(obj.tabGroup, 'Parent', parent);
        end

        function setExperimentTreeRootNode(obj, name, id)
            root = obj.experimentTree.Root;
            set(root, ...
                'Name', name, ...
                'Value', id);
            obj.idToNode(id) = root;
        end

        function setExperimentName(obj, n)
            set(obj.experimentCard.nameField, 'String', n);
        end

        function setExperimentLocation(obj, l)
            set(obj.experimentCard.locationField, 'String', l);
        end

        function setExperimentStartTime(obj, t)
            set(obj.experimentCard.startTimeField, 'String', datestr(t, 14));
        end

        function setExperimentPurpose(obj, p)
            set(obj.experimentCard.purposeField, 'String', p);
        end

        function addSourceNode(obj, parentId, name, id)
            parent = obj.idToNode(parentId);
            node = uiextras.jTree.TreeNode( ...
                'Parent', parent, ...
                'Name', name, ...
                'Value', id);
            node.setIcon(symphonyui.app.App.getResource('icons/source.png'));
            obj.idToNode(id) = node;
        end

        function setSourceLabel(obj, l)
            set(obj.sourceCard.labelField, 'String', l);
        end

        function addEpochGroupNode(obj, parentId, name, id)
            parent = obj.idToNode(parentId);
            node = uiextras.jTree.TreeNode( ...
                'Parent', parent, ...
                'Name', name, ...
                'Value', id);
            node.setIcon(symphonyui.app.App.getResource('icons/group.png'));
            obj.idToNode(id) = node;
        end

        function setEpochGroupLabel(obj, l)
            set(obj.epochGroupCard.labelField, 'String', l);
        end

        function setEpochGroupStartTime(obj, t)
            set(obj.epochGroupCard.startTimeField, 'String', datestr(t, 14));
        end

        function setEpochGroupEndTime(obj, t)
            set(obj.epochGroupCard.endTimeField, 'String', datestr(t, 14));
        end

        function setEpochGroupSource(obj, s)
            set(obj.epochGroupCard.sourceField, 'String', s);
        end

        function setEpochGroupNodeCurrent(obj, id)
            node = obj.idToNode(id);
            node.setIcon(symphonyui.app.App.getResource('icons/group_current.png'));
        end

        function setEpochGroupNodeNormal(obj, id)
            node = obj.idToNode(id);
            node.setIcon(symphonyui.app.App.getResource('icons/group.png'));
        end

        function addEpochNode(obj, parentId, name, id)
            parent = obj.idToNode(parentId);
            node = uiextras.jTree.TreeNode( ...
                'Parent', parent, ...
                'Name', name, ...
                'Value', id);
            node.setIcon(symphonyui.app.App.getResource('icons/epoch.png'));
            obj.idToNode(id) = node;
        end

        function collapseNode(obj, id)
            node = obj.idToNode(id);
            node.collapse();
        end

        function expandNode(obj, id)
            node = obj.idToNode(id);
            node.expand();
        end

        function id = getSelectedNode(obj)
            node = obj.experimentTree.SelectedNodes;
            id = get(node, 'Value');
        end

        function setSelectedNode(obj, id)
            node = obj.idToNode(id);
            obj.experimentTree.SelectedNodes = node;
        end

        function setProperties(obj, data)
            set(obj.propertiesTable, 'Data', data);
        end

        function addProperty(obj, key, value)
            obj.propertiesTable.addRow({key, value});
        end

        function removeProperty(obj, property)
            properties = obj.propertiesTable.getColumnData(1);
            index = find(cellfun(@(c)strcmp(c, property), properties));
            obj.propertiesTable.removeRow(index); %#ok<FNDSB>
        end

        function p = getSelectedProperty(obj)
            row = get(obj.propertiesTable, 'SelectedRow');
            p = obj.propertiesTable.getValueAt(row, 1);
        end

        function setKeywords(obj, data)
            set(obj.keywordsTable, 'Data', data);
        end

        function addKeyword(obj, keyword)
            obj.keywordsTable.addRow(keyword);
        end

        function removeKeyword(obj, keyword)
            keywords = obj.keywordsTable.getColumnData(1);
            index = find(cellfun(@(c)strcmp(c, keyword), keywords));
            obj.keywordsTable.removeRow(index); %#ok<FNDSB>
        end

        function k = getSelectedKeyword(obj)
            row = get(obj.keywordsTable, 'SelectedRow');
            k = obj.keywordsTable.getValueAt(row, 1);
        end

        function setNotes(obj, data)
            for i = 1:numel(data)
                data{i}{1} = datestr(data{i}{1}, 14);
            end
            set(obj.notesTable, 'Data', data);
        end

        function addNote(obj, date, text)
            obj.notesTable.addRow({datestr(date, 14), text});
        end

    end

    methods (Access = private)

        function [addButton, removeButton] = createAddRemoveButtons(obj, parent, addCallback, removeCallback)
            layout = uix.HBox( ...
                'Parent', parent, ...
                'Spacing', 0);
            uix.Empty('Parent', layout);
            addButton = uicontrol( ...
                'Parent', layout, ...
                'Style', 'pushbutton', ...
                'String', '+', ...
                'FontSize', get(obj.figureHandle, 'DefaultUicontrolFontSize') + 1, ...
                'Callback', addCallback);
            removeButton = uicontrol( ...
                'Parent', layout, ...
                'Style', 'pushbutton', ...
                'String', '-', ...
                'FontSize', get(obj.figureHandle, 'DefaultUicontrolFontSize') + 1, ...
                'Callback', removeCallback);
            set(layout, 'Widths', [-1 25 25]);
        end

    end

end
